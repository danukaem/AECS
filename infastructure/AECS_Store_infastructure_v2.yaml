AWSTemplateFormatVersion: "2010-09-09"
Description: delivery service on ecs
Parameters:
  ServiceName:
    Type: String
    Default: Delivery
  VpcId:
    Default: vpc-8e44e9e5
    Type: String
  IAMRole:
    Default: arn:aws:iam::593203563401:role/ecsTaskExecutionRole
    Type: String
  DockerImage:
    Default: 593203563401.dkr.ecr.us-east-2.amazonaws.com/aecs-port:v1
    Type: String
  SN1:
    Default: subnet-32553f7e
    Type: String
  SN2:
    Default: subnet-81696bfb
    Type: String
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["", [!Ref ServiceName, Cluster]]
      
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription : !Join ['',[!Ref ServiceName, Group] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['',[!Ref ServiceName, Task] ]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name:  !Join ['',[!Ref ServiceName, Container] ]
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 80
            
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      ServiceName: !Join ['',[!Ref ServiceName, Service] ]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 120
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SN1
            - !Ref SN2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ['',[!Ref ServiceName, Container] ]
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/getUser/1'
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ["", [!Ref ServiceName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['',[!Ref ServiceName, LoadBalancer] ]
      Scheme: internet-facing
      Subnets:
        - !Ref SN1
        - !Ref SN2
      SecurityGroups:
        - !Ref ContainerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP

Outputs:
  Endpoint:
    Description: Endpoint
    Value: !GetAtt LoadBalancer.DNSName