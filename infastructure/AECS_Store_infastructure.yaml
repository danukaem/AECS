AWSTemplateFormatVersion: "2010-09-09"
Description: delivery service on ecs
Parameters:
  ServiceName:
    Type: String
    Default: Delivery
  VpcId:
    Default: vpc-8e44e9e5
    Type: String
  IAMRole:
    Default: arn:aws:iam::593203563401:role/ecsTaskExecutionRole
    Type: String
  DockerImage:
    Default: 593203563401.dkr.ecr.us-east-2.amazonaws.com/aecs-port:v1
    Type: String
  SN1:
    Default: subnet-32553f7e
    Type: String
  SN2:
    Default: subnet-81696bfb
    Type: String
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:  !Join ['',[!Ref ServiceName, Cluster] ]
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription : !Join ['',[!Ref ServiceName, Group] ]
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['',[!Ref ServiceName, Task] ]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref IAMRole
      ContainerDefinitions:
        - Name:  !Join ['',[!Ref ServiceName, Container] ]
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 80
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Join ['',[!Ref ServiceName, Service] ]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 90
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SN1
            - !Ref SN2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ['',[!Ref ServiceName, Container] ]
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref VpcId
      Name: !Join ['',[!Ref ServiceName, TargetGroup] ]
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/getUser/1'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 10
      TargetType: ip
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        Name: !Join ['',[!Ref ServiceName, LoadBalancer] ]
        Scheme: internet-facing
        Subnets:
           - !Ref SN1
           - !Ref SN2
        SecurityGroups:
           - !Ref ContainerSecurityGroup
        Type: application
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP